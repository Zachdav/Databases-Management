Guidelines while working on Project 1
 
Here are some guidelines and pointers that you can use while working on Project 1. 
 
1. The select operation has to handle simple select (i.e without any where conditions) and also should work with conditions. The conditional select can be implemented using Lambda expressions which is already given in the select operation with Predicate parameter. Please make sure that the Select works in either ways.
 
2. If you want to compare the tuples in two different tables, you may overload the Object class equals() and compareTo() methods and add your own implementation so that every time you don't have to repeat writing the tuple comparison field by field. Feel free to override and add your own Object class methods if need arises.
 
3. If you want to work with indexes, make sure that the key in TreeMap is primary key of the table and the value is going to be tuple. However, the select should be able to work with or without using indexes i.e just with tuples in ArrayList.
 
4. Join operation should work with equi join, natural join etc.
 
5. You can add your own test data apart from movies database given in the Project.

---

Q:

Project 1 (LinHashMap)
In the description for project1, it says that we should be able to compile and run right away. Is that correct? I know that the output won't be correct (obviously), but it should output something? If so, I'm having an issue at line 84 of Table.java. "LinHashMap" cannot be resolved.

A:

LinHashMap implementation is not yet available in your first project. You may use ArrayList for constructing the tables. If you want to use the indexing operations you can remove the comment for line 83 and use the TreeMap(Java collection) for indexing. 
Please comment line 84 and try to run. It should be fine.

---

Q:

Difference Between Project and Select
Can some clarify the difference between the Project and Select operators? We think that Select eliminates rows based on user preference, while Project eliminates columns based on user preference. Is this correct?

A:

Yes. That's correct. 

---

Q:

For the Project operator, do you delete duplicate rows?
So say you have a table with 3 columns Name, Date, Occupation. If the table looks like this:
Name, Date, Occupation
Quin   1/1/12 Job
John   1/2/12 Job
John   1/3/12 Job
Lucy   1/4/12 Job
 
And you project on the Name attribute should the output be:
Name
Quin
John
Lucy
 
or 
 
Name
Quin
John
John
Lucy
 
Thanks.

A:

The answer would be first one. Project operator eliminates duplicates by default in a database. So, the implementation in this project should be same.

---

Q:

Select Query Question
I was wondering whether the select query where it does not say to be implemented is supposed to be already implemented for this. I ask this because when i tested it, it gave the correct output. This is the select query that does not take a single key as input. This is the one that has operators in it. Thanks for any help.

A:

The one with operators, takes parameters that can be used in the where clause. That is already implemented. But it is suggested to test it with different test cases and if for any case it doesn't work, try to improvise it.

---

Q:

Union
When implementing the union operator I can add the first table's tuples to Comparable[] rows, but I can't add table 2's tuples. Does anyone know why that might be?

A:

Please check if the two tables are compatible or not before proceeding to perform union. Otherwise, errors may occur. Please post any error that is appearing so that we can have more details to understand the reason for error.

---

Q:

Select with key
For the Select method that takes a KeyType as a parameter, will the KeyType parameter always have the same attributes as the key that was defined for the table?  For example, the movieStar table defined each tuple's key as consisting of the attribute "name", so will all queries into movieStar using Select(KeyType) just have a KeyType with the name attribute?
 
For example,
movieStar.select (new KeyType ("Harrison_Ford"));
movieStar.select(new KeyType("Carrie_Fisher"));
movieStar.select(new KeyType("Mark_Hamill"));
 
would all be valid queries, but should we also be able to take queries with superkeys such as "name address", "name address gender", etc., like:
 
movieStar.select (new KeyType ("Harrison_Ford", "Beverly_Hills, 'M'));

A:

The primary key alone is sufficient. The other cases will be handled by the predicate parameter.

---

Q:

One more question: this means Select with key should return a table with AT MOST one tuple, i.e. the tuple with that primary key, or a table with no tuples if no tuple has that key, correct?

A:

Yes. That's correct.

---

Q:

Equi join parameters
when implementing the equi join can we assume there will always be only one key for each table being compared. For example will examples be something like "movies.join("studioName", "name", studio)" or can we expect something like "movies.join("studioName topActor", "name actor" studio)". Thanks

A:

All cases have to be considered. Join works attribute by attribute, so should not be an issue with how many attributes are there in the primary key.

---

Q:

Multiple method authors
For some of the methods, we had a couple people working together to get the functionality. Should we just list one of those names in the @author section as the requirements say or say both as is actually the case?

A:

You could mention multiple author names.

---

Q:

Project without primary key
What is the project functionality supposed to do without a primary key? return null? return the whole table? throw an error?

A:

The project without a primary key will return the rows with the other attributes mentioned. But the primary key in the resulting table will change. The new primary key should be a set of all the attributes given as input.

---

Q:

Are we required to implement a cross product join operation?
The rubric says that we need to implement a cross product join, but the original project requirements say nothing about it nor was there a skeleton of it in the code we were given like there were for all other methods. It would require adding a whole new operation if we were to support it.
 
Is this required? If so, what's the specific functionality that differs it from other joins we have (equi join and natural join)?

A:

The natural join without any attributes common in the tables will become a cross product. So, this is another case of natural join.

---


